use crate::scenario::Vendor;
use clap::{Parser, Subcommand};
use clap_complete::Shell;

#[derive(Parser, Debug)]
#[command(name = "benchmark", version, about="falkor benchmark tool", long_about = None, arg_required_else_help(true), propagate_version(true))]
pub struct Cli {
    #[command(subcommand)]
    pub command: Commands,
}

#[derive(Subcommand, Debug)]
pub enum Commands {
    #[command(arg_required_else_help = true)]
    GenerateAutoComplete { shell: Shell },
    #[command(arg_required_else_help = true)]
    #[command(about = "load data into the database")]
    Load {
        #[arg(short, long, value_enum)]
        vendor: Vendor,
        #[arg(short, long, value_enum)]
        size: crate::scenario::Size,
        #[arg(
            short,
            long,
            required = false,
            default_value_t = false,
            default_missing_value = "true",
            help = "execute clear -f before"
        )]
        force: bool,
        #[arg(
            short,
            long,
            required = false,
            default_value_t = false,
            default_missing_value = "true",
            help = "only load the data from the cache and iterate over it, show how much time it takes, do not send it to the server"
        )]
        dry_run: bool,
    },
    #[command(
        about = "generate a set of queries and store them in a file to be used with the run command"
    )]
    GenerateQueries {
        #[arg(short, long, value_enum)]
        size: usize,
        #[arg(short, long, value_enum)]
        dataset: crate::scenario::Size,
        #[arg(
            short,
            long,
            required = false,
            default_missing_value = "queries.json",
            help = "name of json file to save the queries"
        )]
        name: String,
    },

    #[command(
        about = "run the queries generated by the GenerateQueries command against the chosen vendor"
    )]
    Run {
        #[arg(short, long, value_enum)]
        vendor: Vendor,
        #[arg(
            short,
            long,
            required = false,
            default_value_t = 1,
            default_missing_value = "1",
            help = "parallelism level"
        )]
        parallel: usize,
        #[arg(
            short,
            long,
            required = false,
            default_missing_value = "queries.json",
            help = "name of json file to load the queries from"
        )]
        name: String,
        #[arg(
            short,
            long,
            required = true,
            help = "the rate of messages that sent to the server (messages per second)"
        )]
        mps: usize,
    },
}
